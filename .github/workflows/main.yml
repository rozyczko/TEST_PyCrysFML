name: main

on:
  push:

jobs:
  main:
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        build_system: [cmake]
        compiler: [ifx]  # [ifort, ifx]

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - uses: awvwgk/setup-fortran@v1
        with:
          compiler: intel

      - name: Declare env variables (independent)
        shell: bash
        run: |
          echo "PROJECTS_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CRYSFML_PROJECT=crysfml08" >> $GITHUB_ENV
          echo "PYCRYSFML_PROJECT=pycrysfml08" >> $GITHUB_ENV
          echo "DIST_PACKAGE_NAME=pycrysfml08" >> $GITHUB_ENV

      - name: Declare env variables (dependent)
        shell: bash
        run: |
          echo "CRYSFML_REPO=${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}_repo" >> $GITHUB_ENV
          echo "PYCRYSFML_REPO=${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}_repo" >> $GITHUB_ENV
          echo "CRYSFML_BUILD=${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}_build" >> $GITHUB_ENV
          echo "PYCRYSFML_BUILD=${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}_build" >> $GITHUB_ENV
          echo "CRYSFML_DIST=${{ env.PROJECTS_DIR }}/${{ env.CRYSFML_PROJECT }}_dist" >> $GITHUB_ENV
          echo "PYCRYSFML_DIST=${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}_dist" >> $GITHUB_ENV
          echo "PYCRYSFML_WHEEL=${{ env.PROJECTS_DIR }}/${{ env.PYCRYSFML_PROJECT }}_wheel" >> $GITHUB_ENV
          if [[ '${{ runner.os }}' == 'Linux' && '${{ matrix.compiler }}' == 'ifx' ]]; then
            echo "COMPILER_OPTIONS=-fpp -fPIC" >> $GITHUB_ENV
          elif [[ '${{ matrix.compiler }}' == 'gfortran' ]]; then
            echo "COMPILER_OPTIONS=-cpp -std=f2008 -ffree-line-length-none -fPIC" >> $GITHUB_ENV
          fi

      - name: Download CrysFML (fpm_macos branch)
        run: git clone --single-branch --branch powder_mod_fix https://code.ill.fr/rodriguez-carvajal/crysfml2008.git ${{ env.CRYSFML_REPO }}

      - name: Build CrysFML using CMake on Linux/macos
        if: matrix.build_system == 'cmake' && (runner.os == 'Linux' || runner.os == 'macOS')
        run: |
          echo '### cmake -D ARCH32=OFF -D PYTHON_API=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_POSITION_INDEPENDENT_CODE=ON  -D CMAKE_Fortran_COMPILER=${{ matrix.compiler }} -D CMAKE_INSTALL_PREFIX=${{ env.CRYSFML_DIST }}  -S ${{ env.CRYSFML_REPO }} -B ${{ env.CRYSFML_BUILD }}'
          cmake -D ARCH32=OFF -D PYTHON_API=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_POSITION_INDEPENDENT_CODE=ON -D CMAKE_Fortran_COMPILER=${{ matrix.compiler }} -D CMAKE_INSTALL_PREFIX=${{ env.CRYSFML_DIST }}  -S ${{ env.CRYSFML_REPO }} -B ${{ env.CRYSFML_BUILD }}
          echo '### cmake --build ${{ env.CRYSFML_BUILD }} --parallel'
          cmake --build ${{ env.CRYSFML_BUILD }} --parallel
          echo '### cmake --install ${{ env.CRYSFML_BUILD }}'
          cmake --install ${{ env.CRYSFML_BUILD }}

      - name: Download PyCrysFML (master branch)
        run: git clone --single-branch --branch master https://code.ill.fr/scientific-software/pycrysfml08.git ${{ env.PYCRYSFML_REPO }}

      - name: Copy powder_mod.f90 to PyCrysFML src folder
        run: |
          echo '::::: cp ${{ env.CRYSFML_REPO }}/Testing/Powder/Test_2/fortran/src/powder_mod.f90 ${{ env.PYCRYSFML_REPO }}/src/powder_mod.F90'
          cp ${{ env.CRYSFML_REPO }}/Testing/Powder/Test_2/fortran/src/powder_mod.f90 ${{ env.PYCRYSFML_REPO }}/src/powder_mod.F90

      - name: Build PyCrysFML modules one by one (Linux/macos)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          echo '### mkdir -p ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}'
          mkdir -p ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}
          echo '### cd ${{ env.PYCRYSFML_REPO }}/src'
          cd ${{ env.PYCRYSFML_REPO }}/src
          for name in py_cfml_metrics py_cfml_profiles py_cfml_sxtal_geom powder_mod; do
            echo "### ${{ matrix.compiler }} ${{ env.COMPILER_OPTIONS }} -c $name.F90 -I ${{ env.CRYSFML_DIST }}/include"
            ${{ matrix.compiler }} ${{ env.COMPILER_OPTIONS }} -c $name.F90 -I ${{ env.CRYSFML_DIST }}/include
            echo "### ${{ matrix.compiler }} -shared -o $name.so $name.o -L ${{ env.CRYSFML_DIST }}/lib -l CrysFML08 ${{ env.LIBPYTHON }}"
            ${{ matrix.compiler }} -shared -o $name.so $name.o -L ${{ env.CRYSFML_DIST }}/lib -l CrysFML08 ${{ env.LIBPYTHON }}
            echo "### mv $name.so ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}"
            mv $name.so ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}
            echo '### ls -l ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}'
            ls -l ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}
          done
          echo "### rm *.o *.*mod"
          rm *.o *.*mod

      - name: Make PyCrysFML python wheel
        run: |
          # show system path
          echo '### echo ${{ env.GITHUB_PATH }}'
          python --version
          python -m pip install build
          echo '### touch ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}/__init__.py'
          touch ${{ env.PYCRYSFML_DIST }}/${{ env.DIST_PACKAGE_NAME }}/__init__.py
          echo '### python3 -m build --wheel --outdir ${{ env.PYCRYSFML_WHEEL }}'
          python3 -m build --wheel --outdir ${{ env.PYCRYSFML_WHEEL }}
          echo '### ls - l ${{ env.PROJECTS_DIR }}'
          ls -l ${{ env.PROJECTS_DIR }}
          echo '### ls -l ${{ env.PYCRYSFML_DIST }}'
          ls -l ${{ env.PYCRYSFML_DIST }}
          echo '### ls - l ${{ env.PYCRYSFML_WHEEL }}'
          ls -l ${{ env.PYCRYSFML_WHEEL }}

      - name: upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: pycrysfml-${{ matrix.os }}-${{ matrix.compiler }}
          path: ${{ env.PYCRYSFML_WHEEL }}/*.whl

      - name: Install PyCrysFML from local wheel (with dev extras)
        run: |
          echo '### python3 -m pip install "${{ env.PYCRYSFML_WHEEL }}/pycrysfml08-0.0.1a0-py3-none-any.whl"'
          python3 -m pip install "${{ env.PYCRYSFML_WHEEL }}/pycrysfml08-0.0.1a0-py3-none-any.whl"

      - name: Run tests
        run: pytest tests/ -vv
