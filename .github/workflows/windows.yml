name: windows

on:
  push:

jobs:
  main:
    timeout-minutes: 30

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022] 
        build_system: [cmake]
        compiler: [ifx]  # [gfortran, ifort]

    steps:
      - name: Check-out repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
            python-version: 3.11

      - name: Upgrade PIP
        run: python -m pip install --upgrade pip

      - name: Declare env variables (independent)
        shell: bash
        run: |
          echo "PROJECTS_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CRYSFML_PROJECT=crysfml08" >> $GITHUB_ENV
          echo "PYCRYSFML_PROJECT=pycrysfml08" >> $GITHUB_ENV
          echo "DIST_PACKAGE_NAME=pycrysfml08" >> $GITHUB_ENV
          echo "DIST_PACKAGE_VERSION=0.0.1a0" >> $GITHUB_ENV
          echo "PYTHON_TAG=py311" >> $GITHUB_ENV
          if [[ '${{ matrix.compiler }}' == 'ifort' || '${{ matrix.compiler }}' == 'ifx' ]]; then
            echo "COMPILER_OPTIONS=-fpp -fPIC" >> $GITHUB_ENV
          fi
          if [[ '${{ runner.os }}' == 'Windows' ]]; then
            echo "SEP=\\" >> $GITHUB_ENV
            echo "PLATFORM_TAG=win_amd64" >> $GITHUB_ENV
            echo "CMAKE_GENERATOR=-G 'NMake Makefiles'" >> $GITHUB_ENV
            echo "SITE_PACKAGES=c:/hostedtoolcache/windows/python/3.11.8/x64/lib/site-packages" >> $GITHUB_ENV
            echo "LIBPYTHON=${{ env.Python_ROOT_DIR }}\\libs\\python311.lib" >> $GITHUB_ENV
            echo "COMPILER_OPTIONS=/c /fpp /nologo /Warn -DWIN32=ON" >> $GITHUB_ENV
          fi

      - name: Declare env variables (dependent)
        shell: bash
        run: |
          echo "CRYSFML_REPO=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.CRYSFML_PROJECT }}_repo" >> $GITHUB_ENV
          echo "PYCRYSFML_REPO=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.PYCRYSFML_PROJECT }}_repo" >> $GITHUB_ENV
          echo "CRYSFML_BUILD=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.CRYSFML_PROJECT }}_build" >> $GITHUB_ENV
          echo "PYCRYSFML_BUILD=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.PYCRYSFML_PROJECT }}_build" >> $GITHUB_ENV
          echo "CRYSFML_DIST=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.CRYSFML_PROJECT }}_dist" >> $GITHUB_ENV
          echo "PYCRYSFML_DIST=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.PYCRYSFML_PROJECT }}_dist" >> $GITHUB_ENV
          echo "PYCRYSFML_WHEEL=${{ env.PROJECTS_DIR }}${{ env.SEP }}${{ env.PYCRYSFML_PROJECT }}_wheel" >> $GITHUB_ENV
          echo "ORIGINAL_WHEEL_NAME=${{ env.DIST_PACKAGE_NAME }}-${{ env.DIST_PACKAGE_VERSION }}-py3-none-any.whl" >> $GITHUB_ENV
          echo "FIXED_WHEEL_NAME=${{ env.DIST_PACKAGE_NAME }}-${{ env.DIST_PACKAGE_VERSION }}-${{ env.PYTHON_TAG }}-none-${{ env.PLATFORM_TAG }}.whl" >> $GITHUB_ENV

      - name: Install OS-specific dependences (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - uses: awvwgk/setup-fortran@v1
        with:
          compiler: intel

      - name: Download CrysFML (powder_mod_fix branch)
        run: git clone --single-branch --branch powder_mod_fix https://code.ill.fr/rodriguez-carvajal/crysfml2008.git ${{ env.CRYSFML_REPO }}

      - name: Build CrysFML using CMake
        run: |
          echo '::::: cmake ${{ env.CMAKE_GENERATOR }} -D ARCH32=OFF -D PYTHON_API=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_POSITION_INDEPENDENT_CODE=ON -D CMAKE_Fortran_COMPILER=${{ matrix.compiler }} -D CMAKE_INSTALL_PREFIX=${{ env.CRYSFML_DIST }} -S ${{ env.CRYSFML_REPO }} -B ${{ env.CRYSFML_BUILD }}'
          cmake ${{ env.CMAKE_GENERATOR }} -D ARCH32=OFF -D PYTHON_API=OFF -D CMAKE_BUILD_TYPE=Debug -D CMAKE_POSITION_INDEPENDENT_CODE=ON -D CMAKE_Fortran_COMPILER=${{ matrix.compiler }} -D CMAKE_INSTALL_PREFIX=${{ env.CRYSFML_DIST }} -S ${{ env.CRYSFML_REPO }} -B ${{ env.CRYSFML_BUILD }}
          echo '::::: cmake --build ${{ env.CRYSFML_BUILD }} --parallel'
          cmake --build ${{ env.CRYSFML_BUILD }} --parallel
          echo '::::: cmake --install ${{ env.CRYSFML_BUILD }}'
          cmake --install ${{ env.CRYSFML_BUILD }}

      - name: Download PyCrysFML (master branch)
        run: git clone --single-branch --branch master https://code.ill.fr/scientific-software/pycrysfml08.git ${{ env.PYCRYSFML_REPO }}

      - name: Copy powder_mod.f90 to PyCrysFML src folder
        run: |
          echo '::::: cp ${{ env.CRYSFML_REPO }}${{ env.SEP }}Testing${{ env.SEP }}Powder${{ env.SEP }}Test_2${{ env.SEP }}fortran${{ env.SEP }}src${{ env.SEP }}powder_mod.f90 ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}src${{ env.SEP }}powder_mod.F90'
          cp ${{ env.CRYSFML_REPO }}${{ env.SEP }}Testing${{ env.SEP }}Powder${{ env.SEP }}Test_2${{ env.SEP }}fortran${{ env.SEP }}src${{ env.SEP }}powder_mod.f90 ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}src${{ env.SEP }}powder_mod.F90

      - name: Build some PyCrysFML modules one by one (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo '::::: mkdir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}'
          mkdir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}
          echo '::::: cd ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}src'
          cd ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}src
          for %%n in (py_cfml_metrics py_cfml_profiles py_cfml_sxtal_geom powder_mod) do (
            echo "::::: ${{ matrix.compiler }} ${{ env.COMPILER_OPTIONS }} -c %%n.f90 -I ${{ env.CRYSFML_DIST }}/include"
            ${{ matrix.compiler }} ${{ env.COMPILER_OPTIONS }} %%n.f90 -I ${{ env.CRYSFML_DIST }}/include
            echo "::::: link %%n.obj /out:"%%n.pyd" /libpath:${{ env.CRYSFML_DIST }}/lib /dll ${{ env.LIBPYTHON }} CrysFML08.lib"
            link %%n.obj /out:"%%n.pyd" /libpath:${{ env.CRYSFML_DIST }}/lib /dll ${{ env.LIBPYTHON }} CrysFML08.lib
            echo "::::: move %%n.pyd ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}"
            move %%n.pyd ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}
          )
          echo '::::: dir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}'
          dir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}

      - name: Add __init__.py
        run: |
          echo '::::: cp ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}__init__.py ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}'
          cp ${{ env.PYCRYSFML_REPO }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}__init__.py ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}
          echo '::::: ls -l ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}'
          ls -l ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}

      - name: Add magnetic_data.txt database
        run: |
          echo '::::: mkdir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases'
          mkdir ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases
          echo '::::: cp ${{ env.CRYSFML_REPO }}${{ env.SEP }}Src${{ env.SEP }}Databases${{ env.SEP }}magnetic_data.txt ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases'
          cp ${{ env.CRYSFML_REPO }}${{ env.SEP }}Src${{ env.SEP }}Databases${{ env.SEP }}magnetic_data.txt ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases
          echo '::::: ls -l ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases'
          ls -l ${{ env.PYCRYSFML_DIST }}${{ env.SEP }}${{ env.DIST_PACKAGE_NAME }}${{ env.SEP }}Databases

      - name: Validate pyproject.toml
        run: |
          echo "::::: python -m pip install 'validate-pyproject[all]'"
          python -m pip install 'validate-pyproject[all]'
          echo "::::: validate-pyproject pyproject.toml"
          validate-pyproject pyproject.toml

      - name: Build PyCrysFML python wheel
        run: |
          echo '::::: python -m pip install build'
          python -m pip install build
          echo '::::: python3 -m build --wheel --outdir ${{ env.PYCRYSFML_WHEEL }}'
          python3 -m build --wheel --outdir ${{ env.PYCRYSFML_WHEEL }}

      - name: Rename wheel
        run: |
          echo '::::: python -m pip install wheel'
          python -m pip install wheel
          echo '::::: python -m wheel tags --python-tag ${{ env.PYTHON_TAG }} --platform-tag ${{ env.PLATFORM_TAG }} --remove ${{ env.PYCRYSFML_WHEEL }}${{ env.SEP }}${{ env.ORIGINAL_WHEEL_NAME }}'
          python -m wheel tags --python-tag ${{ env.PYTHON_TAG }} --platform-tag ${{ env.PLATFORM_TAG }} --remove ${{ env.PYCRYSFML_WHEEL }}${{ env.SEP }}${{ env.ORIGINAL_WHEEL_NAME }}
          echo "::::: ls -l ${{ env.PYCRYSFML_WHEEL }}"
          ls -l ${{ env.PYCRYSFML_WHEEL }}

      - name: Install PyCrysFML from local wheel (with dev extras)
        run: |
          echo "::::: ls -l ${{ env.PYCRYSFML_WHEEL }}"
          ls -l ${{ env.PYCRYSFML_WHEEL }}
          echo '::::: python3 -m pip install "${{ env.DIST_PACKAGE_NAME }}[dev]" --find-links=${{ env.PYCRYSFML_WHEEL }}'
          python3 -m pip install "${{ env.DIST_PACKAGE_NAME }}[dev]" --find-links=${{ env.PYCRYSFML_WHEEL }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FIXED_WHEEL_NAME }}
          path: ${{ env.PYCRYSFML_WHEEL }}${{ env.SEP }}${{ env.FIXED_WHEEL_NAME }}

      - name: Run tests
        run: pytest tests/ -vv

      - name: Debug
        run: python tests${{ env.SEP }}test_powder_mod.py
